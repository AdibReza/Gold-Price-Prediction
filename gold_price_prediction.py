# -*- coding: utf-8 -*-
"""Gold Price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wXou6g37LnlGXW04gIywK39tOsN2ij9l
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

"""# Data collection and processing"""

gold_dataset = pd.read_csv('/content/drive/MyDrive/ML datasets/Gold Price Prediction(RFR)/gld_price_data.csv')
gold_dataset.head()

gold_dataset.shape

gold_dataset.tail()

gold_dataset.info()

gold_dataset.isnull().sum()

gold_dataset.describe()

"""## Correlation between the different columns in a dataset
Darker color means that the columns are positively correlated an the lighter or negative means that they are negatively correlated.

cbar = color bar

square =the shape of the box

fmt = number of floating points we want

annot = annotations. the column and row labels basically

annot_kws = the size of the text

cmap = color of the map
"""

correlation = gold_dataset.corr()
plt.figure(figsize = (8,8))
sns.heatmap(correlation, cbar =True, square =True, fmt = '.1f', annot= True, annot_kws = {'size':8}, cmap = 'Blues')

# correlation values for GLD
print(correlation['GLD'])

#Checking the distribution of the GLD price
sns.distplot(gold_dataset['GLD'], color ='green')

#here density is nothing but the number of values we have

"""## Splitting the features and target"""

x = gold_dataset.drop(['Date', 'GLD'], axis = 1)
y = gold_dataset['GLD']

print(x)
print(y)

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, random_state = 2)

"""# Model training: Random Forest Regressor
it is an ensemble model. ensemble model means multiple model joined together. this particular model is a join pf decision trees
"""

regressor = RandomForestRegressor(n_estimators = 100)

regressor.fit(x_train, y_train)

test_data_prediction = regressor.predict(x_test)

# error evaluation. As this is  regression model, we are using R2 score
error_score = metrics.r2_score(y_test, test_data_prediction)
print(error_score)


# this score(0.98) does not mean 98%. this is an error value, the less the better.
#it doesn't even tell us how good our model is or the prediction is. for that we need to plot in a graph

"""## Plotting our result in a graph"""

y_test = list(y_test)
plt.plot(y_test, color = 'red', label = 'Actual Values')
plt.plot(test_data_prediction, color='green', label='Predicted Values')
plt.xlabel('Number of Values')
plt.ylabel('GLD price')
plt.title('Actual price vs Predicted Price')
plt.legend()
plt.show()

